"""
Therapy session note formatter
Converts extracted session data into a properly formatted therapy note
"""

from typing import Dict, Any
from datetime import datetime

class TherapyNoteFormatter:
    def __init__(self):
        """Initialize the note formatter"""
        pass
    
    def format_therapy_note(self, session_data: Dict[str, Any]) -> str:
        """
        Format extracted session data into a therapy session note
        
        Args:
            session_data: Dictionary containing extracted session data
            
        Returns:
            Formatted therapy session note as string
        """
        # Get current date if session date not found
        session_date = session_data.get("session_date", "Not specified")
        if session_date == "Not specified" or session_date == "Session date not found":
            session_date = datetime.now().strftime("%B %d, %Y")
        
        # Get client name
        client_name = session_data.get("client_name", "Client")
        if client_name in ["Client name not found", "Not specified", "Client name not extracted (spaCy not available)"]:
            client_name = "Client"
        
        # Format the therapy note
        note = f"""THERAPY SESSION NOTE

Client: {client_name}
Date: {session_date}
Session Type: Individual Therapy

GOAL:
{session_data.get('goal', 'Not specified')}

CONTENT:
{session_data.get('content', 'Not specified')}

ASSESSMENT:
{session_data.get('assessment', 'Not specified')}

DIAGNOSES:
{self._format_diagnoses(session_data.get('diagnoses', []))}

INTERVENTION/RESPONSE:
{session_data.get('intervention_response', 'Not specified')}

PLAN:
{session_data.get('plan', 'Not specified')}

---
Generated by Jules Theranotes AI System
"""
        
        return note.strip()
    
    def _format_diagnoses(self, diagnoses: list) -> str:
        """Format diagnoses list into readable text"""
        if not diagnoses or diagnoses == ["No diagnoses mentioned"]:
            return "No diagnoses mentioned"
        
        # Remove duplicates and format
        unique_diagnoses = list(set(diagnoses))
        if len(unique_diagnoses) == 1:
            return unique_diagnoses[0]
        else:
            return "\n".join(f"- {diagnosis}" for diagnosis in unique_diagnoses)
    
    def format_json_output(self, session_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Format session data as structured JSON for API responses
        
        Args:
            session_data: Dictionary containing extracted session data
            
        Returns:
            Formatted JSON structure
        """
        return {
            "client_name": session_data.get("client_name", "Not specified"),
            "session_date": session_data.get("session_date", "Not specified"),
            "goal": session_data.get("goal", "Not specified"),
            "content": session_data.get("content", "Not specified"),
            "assessment": session_data.get("assessment", "Not specified"),
            "diagnoses": session_data.get("diagnoses", ["No diagnoses mentioned"]),
            "intervention_response": session_data.get("intervention_response", "Not specified"),
            "plan": session_data.get("plan", "Not specified"),
            "formatted_note": self.format_therapy_note(session_data),
            "raw_transcript": session_data.get("raw_transcript", "")
        }
